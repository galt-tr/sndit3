[["/home/project/src/routes.js","import express from 'express';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport speakeasy from 'speakeasy';\nimport twilio from 'twilio';\nimport { getDb } from './db.js';\n\nconst router = express.Router();\n\nconst SECRET_KEY = process.env.JWT_SECRET || 'your-secret-key';\nconst ENABLE_2FA = process.env.ENABLE_2FA === 'true';\n\n// Twilio configuration\nconst TWILIO_ACCOUNT_SID = process.env.TWILIO_ACCOUNT_SID;\nconst TWILIO_AUTH_TOKEN = process.env.TWILIO_AUTH_TOKEN;\nconst TWILIO_PHONE_NUMBER = process.env.TWILIO_PHONE_NUMBER;\n\nconst twilioClient = twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN);\n\n// Middleware to verify JWT token\nconst verifyToken = (req, res, next) => {\n  const token = req.headers['authorization'];\n  if (!token) return res.status(403).send({ auth: false, message: 'No token provided.' });\n  \n  jwt.verify(token.split(' ')[1], SECRET_KEY, (err, decoded) => {\n    if (err) return res.status(401).send({ auth: false, message: 'Failed to authenticate token.' });\n    req.userId = decoded.id;\n    next();\n  });\n};\n\n// User routes\nrouter.post('/signup', async (req, res) => {\n  const db = await getDb();\n  const { email, password, phoneNumber, name } = req.body;\n  \n  try {\n    const existingUser = await db.get('SELECT * FROM users WHERE email = ?', [email]);\n    if (existingUser) {\n      return res.status(400).send({ message: 'Email already exists' });\n    }\n\n    const hashedPassword = bcrypt.hashSync(password, 8);\n    const twoFactorSecret = speakeasy.generateSecret({ length: 32 });\n\n    const result = await db.run(\n      'INSERT INTO users (email, password, phoneNumber, name, twoFactorSecret) VALUES (?, ?, ?, ?, ?)',\n      [email, hashedPassword, phoneNumber, name, JSON.stringify(twoFactorSecret)]\n    );\n\n    res.status(201).send({ message: 'User created successfully', userId: result.lastID });\n  } catch (error) {\n    console.error(error);\n    res.status(500).send({ message: 'Error creating user' });\n  }\n});\n\nrouter.post('/login', async (req, res) => {\n  const db = await getDb();\n  const { email, password } = req.body;\n\n  try {\n    const user = await db.get('SELECT * FROM users WHERE email = ?', [email]);\n    if (!user) return res.status(404).send({ message: 'User not found' });\n\n    const passwordIsValid = bcrypt.compareSync(password, user.password);\n    if (!passwordIsValid) return res.status(401).send({ auth: false, token: null });\n\n    if (ENABLE_2FA) {\n      const twoFactorSecret = JSON.parse(user.twoFactorSecret);\n      const twoFactorCode = speakeasy.totp({\n        secret: twoFactorSecret.base32,\n        encoding: 'base32'\n      });\n\n      twilioClient.messages.create({\n        body: `Your 2FA code is: ${twoFactorCode}`,\n        from: TWILIO_PHONE_NUMBER,\n        to: user.phoneNumber\n      }).then(() => {\n        res.status(200).send({ userId: user.id, message: '2FA code sent to your phone' });\n      }).catch(error => {\n        console.error('Error sending 2FA code:', error);\n        res.status(500).send({ message: 'Error sending 2FA code' });\n      });\n    } else {\n      const token = jwt.sign({ id: user.id }, SECRET_KEY, { expiresIn: 86400 });\n      res.status(200).send({ auth: true, token });\n    }\n  } catch (error) {\n    console.error(error);\n    res.status(500).send({ message: 'Error on login' });\n  }\n});\n\nrouter.post('/verify-2fa', async (req, res) => {\n  if (!ENABLE_2FA) {\n    return res.status(400).send({ message: '2FA is currently disabled' });\n  }\n\n  const db = await getDb();\n  const { userId, code } = req.body;\n\n  try {\n    const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);\n    if (!user) return res.status(404).send({ message: 'User not found' });\n\n    const twoFactorSecret = JSON.parse(user.twoFactorSecret);\n    const verified = speakeasy.totp.verify({\n      secret: twoFactorSecret.base32,\n      encoding: 'base32',\n      token: code\n    });\n\n    if (verified) {\n      const token = jwt.sign({ id: user.id }, SECRET_KEY, { expiresIn: 86400 });\n      res.status(200).send({ auth: true, token });\n    } else {\n      res.status(401).send({ auth: false, message: 'Invalid 2FA code' });\n    }\n  } catch (error) {\n    console.error(error);\n    res.status(500).send({ message: 'Error verifying 2FA code' });\n  }\n});\n\n// Invoice routes\nrouter.get('/invoices', verifyToken, async (req, res) => {\n  const db = await getDb();\n  try {\n    const invoices = await db.all('SELECT * FROM invoices WHERE userId = ?', [req.userId]);\n    for (let invoice of invoices) {\n      invoice.items = await db.all('SELECT * FROM invoice_items WHERE invoiceId = ?', [invoice.id]);\n      invoice.customer = await db.get('SELECT * FROM customers WHERE id = ?', [invoice.customerId]);\n    }\n    res.json(invoices);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send({ message: 'Error fetching invoices' });\n  }\n});\n\nrouter.post('/invoices', verifyToken, async (req, res) => {\n  const db = await getDb();\n  const { customer, date, dueDate, items, total, status, taxPercentage } = req.body;\n\n  try {\n    const result = await db.run(\n      'INSERT INTO invoices (userId, customerId, date, dueDate, total, status, taxPercentage) VALUES (?, ?, ?, ?, ?, ?, ?)',\n      [req.userId, customer.id, date, dueDate, total, status, taxPercentage]\n    );\n\n    const invoiceId = result.lastID;\n\n    for (let item of items) {\n      await db.run(\n        'INSERT INTO invoice_items (invoiceId, description, quantity, price) VALUES (?, ?, ?, ?)',\n        [invoiceId, item.description, item.quantity, item.price]\n      );\n    }\n\n    const newInvoice = await db.get('SELECT * FROM invoices WHERE id = ?', [invoiceId]);\n    newInvoice.items = await db.all('SELECT * FROM invoice_items WHERE invoiceId = ?', [invoiceId]);\n    newInvoice.customer = customer;\n\n    res.status(201).json(newInvoice);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send({ message: 'Error creating invoice' });\n  }\n});\n\n// Customer routes\nrouter.get('/customers', verifyToken, async (req, res) => {\n  const db = await getDb();\n  try {\n    const customers = await db.all('SELECT * FROM customers WHERE userId = ?', [req.userId]);\n    res.json(customers);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send({ message: 'Error fetching customers' });\n  }\n});\n\nrouter.post('/customers', verifyToken, async (req, res) => {\n  const db = await getDb();\n  const { name, companyName, phoneNumber, email, address } = req.body;\n\n  try {\n    const result = await db.run(\n      'INSERT INTO customers (userId, name, companyName, phoneNumber, email, address) VALUES (?, ?, ?, ?, ?, ?)',\n      [req.userId, name, companyName, phoneNumber, email, address]\n    );\n\n    const newCustomer = await db.get('SELECT * FROM customers WHERE id = ?', [result.lastID]);\n    res.status(201).json(newCustomer);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send({ message: 'Error creating customer' });\n  }\n});\n\nexport default router;"]]